//fopenTest.cpp - Demonstrates on_exit()
//
// 07-Feb-19  M. Watler         Created.

#include <iostream>
#include <stdio.h>
#include <stdlib.h>//on_exit()
#include <sys/time.h>

char inFile[] = "/home/miguelwatler/src/Week1/speedTest/LargeFOpen.txt";
char outFile[]= "/home/miguelwatler/src/Week1/speedTest/LargeFOpenCopy.txt";
const long nanosecsPerSecond=1000000000;

using namespace std;

void exit_handler(int ev, void *agr);

int main()
{
    FILE *fpIn=NULL;
    FILE *fpOut=NULL;
    int c;
    double elapsedTime;

    fpIn = fopen(inFile, "r");
    fpOut = fopen(outFile, "w");
    on_exit(exit_handler, fpIn);
    on_exit(exit_handler, fpOut);
    if(fpIn==NULL) {
       cout << "Error opening " << inFile << endl;
       return -1;
    }
    if(fpOut==NULL) {
       cout << "Error opening " << outFile << endl;
//     fclose(fpIn);
       return -1;
    }

    timespec ts1, ts2;
    clock_gettime(CLOCK_REALTIME, &ts1);
    do {
        c = fgetc(fpIn);
        fputc(c, fpOut);
    } while (c!=EOF);
    clock_gettime(CLOCK_REALTIME, &ts2);
    elapsedTime = (double)(ts2.tv_sec-ts1.tv_sec)*nanosecsPerSecond + (ts2.tv_nsec-ts1.tv_nsec);
    elapsedTime /= nanosecsPerSecond;
    cout << "The elapsed time with fopen is " << elapsedTime << "seconds" << endl;

    fclose(fpIn);
    fclose(fpOut);
    cout << "DONE" << endl;

    return 0;
}

void exit_handler(int ev, void *arg)
{
    cout<<"exit_handler: ev:"<<ev<<endl;
    FILE *fp=(FILE *)arg;
    if(fp!=NULL) {
        cout<<"exit_handler: fclose(fp)"<<endl;
        fclose(fp);
    } else {
        cout<<"exit_handler: fp already closed"<<endl;
    }
}
