//openTest.cpp - Performs File I/O
//
// 18-Jan-19  M. Watler         Created.

#include <fcntl.h>
#include <iostream>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include <sys/time.h>

using namespace std;

int main()
{
    int fdIn, fdOut;
    int openFlags;
    mode_t filePerms;
    const int BUF_SIZE=64;//Set the BUF_SIZE to 1024 and openTest will be much quicker than fopenTest
    char buf[BUF_SIZE];
    ssize_t numRead, numWrite;
    double elapsedTime;
    int rc=0;

    char inFile[] = "/home/watler/sep400/Week2/speedTest/LargeOpen.txt";
    char outFile[]= "/home/watler/sep400/Week2/speedTest/LargeOpenCopy.txt";
    const long nanosecsPerSecond=1000000000;

    fdIn = open(inFile, O_RDONLY);
    if(fdIn==-1) {
       cout << "Error opening " << inFile << endl;
       perror("open");
       rc=-1;
    }

    if(rc==0) {
        openFlags = O_CREAT | O_WRONLY | O_TRUNC;
        filePerms = S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH;/* rw-rw-rw- */
        fdOut = open(outFile, openFlags, filePerms);
        if(fdOut==-1) {
            cout << "Error opening " << outFile << endl;
            perror("open");
            close(fdIn);
	    rc=-1;
        }
    }

    if(rc==0) {
        timespec ts1, ts2;
        clock_gettime(CLOCK_REALTIME, &ts1);
        do {
           numRead = read(fdIn, buf, BUF_SIZE);
           numWrite = write(fdOut, buf, numRead);
           if(numWrite!=numRead) {
              cout << "Could not write the whole buffer. numRead: " << numRead << " numWrite: " << numWrite << endl;
           }
        } while (numRead>0);
        clock_gettime(CLOCK_REALTIME, &ts2);
        elapsedTime = (double)(ts2.tv_sec-ts1.tv_sec)*nanosecsPerSecond + (ts2.tv_nsec-ts1.tv_nsec);
        elapsedTime /= nanosecsPerSecond;
        cout << "The elapsed time with open is " << elapsedTime << "seconds" << endl;

        close(fdIn);
        close(fdOut);
        cout << "DONE" << endl;
    }

    return rc;
}
